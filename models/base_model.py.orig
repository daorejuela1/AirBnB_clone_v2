#!/usr/bin/python3
"""This module defines a base class for all models in our hbnb clone"""
import uuid
from datetime import datetime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, ForeignKey, DateTime

Base = declarative_base()


<<<<<<< Updated upstream
class BaseModel:
    """A base class for all hbnb models"""
    def __init__(self, *args, **kwargs):
        """Instatntiates a new model"""
        if not kwargs:
            from models import storage
            self.id = str(uuid.uuid4())
            self.created_at = datetime.now()
            self.updated_at = datetime.now()
            storage.new(self)
        else:
            kwargs['updated_at'] = datetime.strptime(kwargs['updated_at'],
                                                     '%Y-%m-%dT%H:%M:%S.%f')
            kwargs['created_at'] = datetime.strptime(kwargs['created_at'],
                                                     '%Y-%m-%dT%H:%M:%S.%f')
            del kwargs['__class__']
            self.__dict__.update(kwargs)
=======
<<<<<<< Updated upstream
Base = declarative_base()


class BaseModel():
    """ Defines all common attributes/methods for other classes """
=======
class BaseModel:
    """A base class for all hbnb models"""
>>>>>>> Stashed changes
    id = Column(String(60), primary_key=True, nullable=False, unique=True)
    created_at = Column(DateTime, nullable=False, default=datetime.utcnow())
    updated_at = Column(DateTime, nullable=False, default=datetime.utcnow())

    def __init__(self, *args, **kwargs):
<<<<<<< Updated upstream
        """ Initializes the instances attributes """
        if kwargs:
            date_format = "%Y-%m-%dT%H:%M:%S.%f"
            k_dict = kwargs.copy()
            del k_dict["__class__"]
            for key in k_dict:
                if (key == "created_at" or key == "updated_at"):
                    k_dict[key] = datetime.strptime(k_dict[key], date_format)
            self.__dict__ = k_dict
        else:
            self.id = str(uuid.uuid4())
            self.created_at = datetime.today()
            self.updated_at = datetime.today()
=======
        """Instatntiates a new model"""
        if not kwargs:
            from models import storage
            self.id = str(uuid.uuid4())
            self.created_at = datetime.now()
            self.updated_at = datetime.now()

        else:
            if "created_at" in kwargs:
                kwargs['created_at'] = (datetime.strptime(kwargs['created_at'],
                                        '%Y-%m-%dT%H:%M:%S.%f'))
            else:
                self.created_at = datetime.now()
            if "updated_at" in kwargs:
                kwargs['updated_at'] = (datetime.strptime(kwargs['updated_at'],
                                        '%Y-%m-%dT%H:%M:%S.%f'))
            else:
                self.updated_at = datetime.now()
            if "id" not in kwargs:
                self.id = str(uuid.uuid4())

            if "__class__" in kwargs:
                del kwargs['__class__']
            self.__dict__.update(kwargs)
>>>>>>> Stashed changes
>>>>>>> Stashed changes

    def __str__(self):
        """Returns a string representation of the instance"""
        cls = (str(type(self)).split('.')[-1]).split('\'')[0]
        return '[{}] ({}) {}'.format(cls, self.id, self.__dict__)

    def save(self):
<<<<<<< Updated upstream
        """Updates updated_at with current time when instance is changed"""
        from models import storage
        self.updated_at = datetime.now()
        storage.save()

    def to_dict(self):
=======
<<<<<<< Updated upstream
        """ Updates update_at """
        self.updated_at = datetime.today()
=======
        """Updates updated_at with current time when instance is changed"""
        from models import storage
        self.updated_at = datetime.now()
>>>>>>> Stashed changes
        storage.new(self)
        storage.save()

    def to_dict(self):
<<<<<<< Updated upstream
        """ Generate a new dict with an extra field __class__ """
        new_dict = self.__dict__.copy()
        new_dict["__class__"] = self.__class__.__name__
        new_dict["created_at"] = self.created_at.isoformat()
        new_dict["updated_at"] = self.updated_at.isoformat()
        if "_sa_instance_state" in new_dict:
            del new_dict["_sa_instance_state"]
        return new_dict

    def delete(self):
        """ Delete current instance from storage """
=======
>>>>>>> Stashed changes
        """Convert instance into dict format"""
        dictionary = {}
        dictionary.update(self.__dict__)
        dictionary.update({'__class__':
                          (str(type(self)).split('.')[-1]).split('\'')[0]})
        dictionary['created_at'] = self.created_at.isoformat()
        dictionary['updated_at'] = self.updated_at.isoformat()
<<<<<<< Updated upstream
        return dictionary
=======

        if "_sa_instance_state" in dictionary:
            del dictionary["_sa_instance_state"]

        return dictionary

    def delete(self):
        """ Delete current instance from storage """
        from models import storage
>>>>>>> Stashed changes
        storage.delete(self)
>>>>>>> Stashed changes
